
generator client {
  provider = "prisma-client-js"
 }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id          Int                   @id @default(autoincrement())
  name        String
  email       String    @unique
  phoneNumber String
  username    String    @unique
  password    String
  role        AdminRole
  isActive    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
}

model Brand {
  id              Int      @id @default(autoincrement())
  name            String   @unique
  logoUrl         String
  vehicleImageUrl String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Car             Car[]
}

model Car {
  id                Int                   @id @default(autoincrement())
  name              String
  price             Float
  description       String
  shortDescription  String
  brandId           Int
  model             String
  mileage           Int
  status            CarStatus
  isFavorite        Boolean       @default(false)
  badge             String?
  enginePower       Int
  seats             Int
  color             String
  yearOfManufacture Int
  currentLocation   String
  availability      Boolean       @default(true)
  drive             String
  engineSize        Float
  fuelType          String
  horsePower        Int
  transmission      String
  torque            String?
  aspiration        String?
  acceleration      Float?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime
  Brand             Brand         @relation(fields: [brandId], references: [id])
  CarImage          CarImage[]
  SellListing       SellListing[]
  Feature           Feature[]

  SellListingOriginal SellListingOriginal[]
}

model CarImage {
  id        Int                   @id @default(autoincrement())
  url       String
  carId     Int
  createdAt DateTime @default(now())
  updatedAt DateTime
  Car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
}

model Feature {
  id        Int                   @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
  Car       Car[]
}

model Member {
  id          Int                   @id @default(autoincrement())
  name        String
  email       String        @unique
  phoneNumber String
  password    String
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  SellListing SellListing[]

  SellListingOriginal SellListingOriginal[]
}

model PaymentOption {
  id          Int                   @id @default(autoincrement())
  name        String
  logoUrl     String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}


model SellListing {
  id                  Int                @id @default(autoincrement())
  // Owner/Seller Information
  name                String
  email               String
  phoneNumber         String
  
  // Basic Car Information
  carName             String
  description         String
  color               String
  location            String
  mileage             Int
  brandName           String
  carType             String
  yearOfManufacture   Int
  
  // Engine & Performance Details
  enginePower         Int
  engineType          String?
  engineSize          Float?
  fuelType            String?
  transmission        String?           // Manual, Automatic, CVT, etc.
  driveType           String?           // FWD, RWD, AWD, 4WD
  horsePower          Int?
  torque              String?
  acceleration        Float?           // 0-60 mph time
  topSpeed            Int?             // Maximum speed in mph/kmh
  
  // Additional Specifications
  vinNumber           String?          // Vehicle Identification Number
  registrationNumber  String?          // License plate or registration number
  lastServiceDate     DateTime?        // Date of last service
  numberOfOwners      Int?             // Number of previous owners
  seatingCapacity     Int?             // Number of seats
  doors               Int?             // Number of doors
  weight              Float?           // Vehicle weight in kg
  fuelTankCapacity    Float?           // Capacity in liters
  
  // Features & Equipment
  hasAC               Boolean?         // Air conditioning
  hasPowerSteering    Boolean?         // Power steering
  hasNavigation       Boolean?         // Navigation system
  hasSunroof          Boolean?         // Sunroof/Moonroof
  hasLeatherSeats     Boolean?         // Leather seats
  hasBackupCamera     Boolean?         // Backup camera
  hasParkingSensors   Boolean?         // Parking sensors
  hasBluetoothAudio   Boolean?         // Bluetooth audio
  hasCruiseControl    Boolean?         // Cruise control
  hasKeylessEntry     Boolean?         // Keyless entry
  
  // Safety Features
  hasABS              Boolean?         // Anti-lock Braking System
  hasAirbags          Boolean?         // Airbags
  hasESP              Boolean?         // Electronic Stability Program
  hasTractionControl  Boolean?         // Traction control
  
  // Condition and Pricing
  condition           Condition
  sellingPrice        Float
  marketValue         Float?           // Estimated market value
  isNegotiable        Boolean?         // Price negotiability
  reasonForSelling    String?          // Why the owner is selling
  
  // Images and Documentation
  imageUrl            String?          // Keep for backward compatibility
  documentUrls        String[]         // Array of document URLs (service history, etc.)
  
  // Listing Status and Relations
  carId               Int?
  memberId            Int?
  status              ListingStatus    @default(PENDING)
  rejectionReason     String?          // Added for storing rejection reasons
  
  // Availability for viewing
  availableForViewing Boolean?         @default(true)
  bestTimeToContact   String?          // Preferred contact hours
  
  // Timestamps
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  
  // Relations
  Car                 Car?             @relation(fields: [carId], references: [id])
  Member              Member?          @relation(fields: [memberId], references: [id])
  SellListingImages   SellListingImage[] // New relation for multiple images
  
  // Extra information field for any additional details
  additionalInfo      Json?            // For storing any other custom fields
}
model SellListingOriginal {
  id                  Int                @id @default(autoincrement())
  // Owner/Seller Information
  name                String
  email               String
  phoneNumber         String
  
  // Basic Car Information
  carName             String
  description         String
  color               String
  location            String
  mileage             Int
  brandName           String
  carType             String
  yearOfManufacture   Int
  
  // Engine & Performance Details
  enginePower         Int
  engineType          String?
  engineSize          Float?
  fuelType            String?
  transmission        String?           // Manual, Automatic, CVT, etc.
  driveType           String?           // FWD, RWD, AWD, 4WD
  horsePower          Int?
  torque              String?
  acceleration        Float?           // 0-60 mph time
  topSpeed            Int?             // Maximum speed in mph/kmh
  
  // Additional Specifications
  vinNumber           String?          // Vehicle Identification Number
  registrationNumber  String?          // License plate or registration number
  lastServiceDate     DateTime?        // Date of last service
  numberOfOwners      Int?             // Number of previous owners
  seatingCapacity     Int?             // Number of seats
  doors               Int?             // Number of doors
  weight              Float?           // Vehicle weight in kg
  fuelTankCapacity    Float?           // Capacity in liters
  
  // Features & Equipment
  hasAC               Boolean?         // Air conditioning
  hasPowerSteering    Boolean?         // Power steering
  hasNavigation       Boolean?         // Navigation system
  hasSunroof          Boolean?         // Sunroof/Moonroof
  hasLeatherSeats     Boolean?         // Leather seats
  hasBackupCamera     Boolean?         // Backup camera
  hasParkingSensors   Boolean?         // Parking sensors
  hasBluetoothAudio   Boolean?         // Bluetooth audio
  hasCruiseControl    Boolean?         // Cruise control
  hasKeylessEntry     Boolean?         // Keyless entry
  
  // Safety Features
  hasABS              Boolean?         // Anti-lock Braking System
  hasAirbags          Boolean?         // Airbags
  hasESP              Boolean?         // Electronic Stability Program
  hasTractionControl  Boolean?         // Traction control
  
  // Condition and Pricing
  condition           Condition
  sellingPrice        Float
  marketValue         Float?           // Estimated market value
  isNegotiable        Boolean?         // Price negotiability
  reasonForSelling    String?          // Why the owner is selling
  
  // Images and Documentation
  imageUrl            String?          // Keep for backward compatibility
  documentUrls        String[]         // Array of document URLs (service history, etc.)
  
  // Listing Status and Relations
  carId               Int?
  memberId            Int?
  status              ListingStatus    @default(PENDING)
  rejectionReason     String?          // Added for storing rejection reasons
  
  // Availability for viewing
  availableForViewing Boolean?         @default(true)
  bestTimeToContact   String?          // Preferred contact hours
  
  // Timestamps
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  
  // Relations
  Car                 Car?             @relation(fields: [carId], references: [id])
  Member              Member?          @relation(fields: [memberId], references: [id])
  SellListingImages   SellListingImage[] // New relation for multiple images
  
  // Extra information field for any additional details
  additionalInfo      Json?            // For storing any other custom fields
}

// New model for SellListing images
model SellListingImage {
  id            Int          @id @default(autoincrement())
  url           String
  sellListingId Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  SellListing   SellListing  @relation(fields: [sellListingId], references: [id], onDelete: Cascade)

  SellListingOriginal SellListingOriginal[]
}



model Service {
  id          Int             @id @default(autoincrement())
  name        String
  description String
  logoUrl     String
  price       Float?          // Optional price field
  duration    String?         // Optional duration (e.g., "2 hours", "3 days")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  bookings    ServiceBooking[]
}

model Ticket {
  id           Int                   @id @default(autoincrement())
  ticketNumber String       @unique
  name         String
  email        String
  phoneNumber  String
  message      String
  status       TicketStatus @default(OPEN)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  responses    TicketResponse[]
}
enum AdminRole {
  SUPER_ADMIN
  MANAGER
  ADMIN
  CTO
  FINANCE_ADMIN
}

enum CarStatus {
  NEW
  USED
}

enum Condition {
  GOOD
  AVERAGE
  POOR
  BAD
}

enum ListingStatus {
  PENDING
  APPROVED
  REJECTED
  SOLD
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}


model TicketResponse {
  id        Int      @id @default(autoincrement())
  message   String
  ticketId  Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}






model ServiceBooking {
  id              Int           @id @default(autoincrement())
  name            String
  email           String
  phoneNumber     String
  serviceId       Int
  service         Service       @relation(fields: [serviceId], references: [id])
  carDetails      String        // Car make, model, year, etc.
  preferredDate   DateTime
  alternateDate   DateTime?
  message         String?
  status          BookingStatus @default(PENDING)
  responses       ServiceBookingResponse[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model ServiceBookingResponse {
  id              Int           @id @default(autoincrement())
  message         String
  bookingId       Int
  booking         ServiceBooking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  RESCHEDULED
}
model Invitation {
  id                              Int      @id @default(autoincrement())
  email                           String
  token                           String   @unique
  role                            UserRole
  status                          String   @default("PENDING")
  expiresAt                       DateTime
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime
  inviterId                       Int
  inviter   User     @relation("inviter_relation", fields: [inviterId], references: [id], map: "Invitation_inviter_fkey")
  userId                          Int?
  User_Invitation_inviterIdToUser User     @relation("Invitation_inviterIdToUser", fields: [inviterId], references: [id], map: "Invitation_inviterId_user_fkey")
  User_Invitation_userIdToUser    User?    @relation("Invitation_userIdToUser", fields: [userId], references: [id], map: "Invitation_userId_user_fkey")

  @@index([email])
  @@index([inviterId])
  @@index([status])
  @@index([token])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                                    Int                  @id @default(autoincrement())
  name                                  String?
  email                                 String               @unique
  emailVerified                         DateTime?
  password                              String?
  image                                 String?
  role                                  UserRole             @default(USER)
  status                                UserStatus           @default(PENDING)
  createdAt                             DateTime             @default(now())
  updatedAt                             DateTime
  lastLogin                             DateTime?
  organization                          String?
  invitedBy                             Int?
  Account                               Account[]
  Invitation_Invitation_inviterIdToUser Invitation[]         @relation("Invitation_inviterIdToUser")
  Invitation_Invitation_userIdToUser    Invitation[]         @relation("Invitation_userIdToUser")
  invitedUsers                          Invitation[]         @relation("inviter_relation")
  Session                               Session[]
  UserActivity                          UserActivity[]


  @@index([email])
  @@index([role])
}

model UserActivity {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  details   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])

  @@index([action])
  @@index([createdAt])
  @@index([userId])
}
model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}
model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}